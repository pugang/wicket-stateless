apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'maven'
apply plugin:'application'

targetCompatibility = '1.6'
sourceCompatibility = '1.6'

// *.html, *.xml and *.properties + other files copy forward to build directory
sourceSets.main.output.resourcesDir 'src/main/java'
sourceSets.test.output.resourcesDir 'src/test/java'

logging.captureStandardOutput LogLevel.WARN

group = 'com.robmcguinness'
archivesBaseName = 'wicket-stateless'
version = '0.0.3-SNAPSHOT'
description ="A sample project that uses Wicket stateless ajax components."

mainClassName = "com.robmcguinness.Start"
applicationName = "app"

manifest.mainAttributes(
	"Built-By": System.getProperty("user.name"),
	"Implementation-Title": "Wicket-Stateless",
	"Implementation-Version": version,
	"Implementation-Vendor": "robmcguinness.com"
)

repositories {

	maven { url 'http://download.java.net/maven/2/' }
	maven { url 'https://raw.github.com/robmcguinness/maven-repository/master/snapshots/' } // apache wicket snapshot is very old so using my own custom github maven repo

	mavenCentral()

}

// never include this modules in build
configurations {
	all*.exclude module: 'commons-logging'
	all*.exclude group: 'cglib', module: 'cglib-nodep'
	all*.exclude group: 'log4j', module: 'log4j'
	all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

libz = [
	wicket: '6-CUSTOM-SNAPSHOT',
	jetty: '7.5.4.v20111024',
	junit: '4.8.2',
	logback: '0.9.30',
	log4j: '1.6.4',
	jersey: '1.11'
]

dependencies {
	// wicket
	compile	'org.apache.wicket:wicket-core:'+libz.wicket,
		'org.apache.wicket:wicket-devutils:'+libz.wicket

	// jetty
	compile "org.eclipse.jetty:jetty-webapp:"+libz.jetty

	// logging
	compile	'ch.qos.logback:logback-classic:'+libz.logback,
		'org.slf4j:log4j-over-slf4j:'+libz.log4j

	// jersey
	compile 'com.sun.jersey:jersey-core:'+libz.jersey,
		'com.sun.jersey:jersey-client:'+libz.jersey,
		'com.sun.jersey:jersey-json:'+libz.jersey

	// test
	testCompile 'junit:junit:'+libz.junit
}

task stage(dependsOn: ['clean', 'installApp'])

task createMavenProjectStructure << {
    logger.info("Creating Maven Project Structure\n")

    webAppDir.mkdirs()
    sourceSets.all*.java.srcDirs*.each { it.mkdirs() }
    sourceSets.all*.resources.srcDirs*.each { it.mkdirs() }
}